[33mcommit eea09ba2d853506dc5b5ea015550b1baa8f38d96[m
Author: GregAMast <gregamast@gmail.com>
Date:   Mon Aug 15 06:20:29 2016 +0000

    getting back into it

[1mdiff --git a/Button.cpp b/Button.cpp[m
[1mindex 60d4553..38099c9 100755[m
[1m--- a/Button.cpp[m
[1m+++ b/Button.cpp[m
[36m@@ -287,8 +287,10 @@[m [mvoid Button::enableText(char v) {[m
 [m
 /* Set button text */[m
 void Button::setText(string txt) {						// Set readout label[m
[31m-	text.assign(txt);[m
[31m-	bufferSaved = false;[m
[32m+[m	[32mif(txt.compare(text) != 0) {[m
[32m+[m		[32mtext.assign(txt);[m
[32m+[m		[32mbufferSaved = false;[m
[32m+[m	[32m}[m
 }[m
 [m
 /* Set button value */[m
[1mdiff --git a/ConnectionManager.cpp b/ConnectionManager.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..35b72a4[m
[1m--- /dev/null[m
[1m+++ b/ConnectionManager.cpp[m
[36m@@ -0,0 +1,125 @@[m
[32m+[m[41m[m
[32m+[m[32m#include "ConnectionManager.h"[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mvoid ConnectionManager(uint64_t loopTime , Serial* ELMSerial, ConnectionStatus* ELMStatus, uint64_t* ELMConnectStartTime, ParmStatus* ELMVersionStat ,string* ELMVersion, ConnectionStatus* ECUStatus , int* ECUConnectTries, ParmStatus* ProtocolStat , string* Protocol , ParmStatus* PIDSupportRequestStatus , int* currentPIDSupportRequest, std::vector<PID>& SupportPIDs){[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m//Initialize variables[m[41m[m
[32m+[m	[32mint 		ELMConnectTimeout 	= 1000; 					// Timeout, milliseconds[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m// Autoconnection and connection statusing logic[m[41m	[m
[32m+[m	[32mif(*ELMStatus == disconnected) {[m[41m[m
[32m+[m		[32m*ELMStatus = connecting;[m[41m[m
[32m+[m		[32mELMSerial->serialWrite("ATZ"); //ELM reset[m[41m[m
[32m+[m		[32m*ELMConnectStartTime = loopTime;[m[41m		[m
[32m+[m	[32m}[m[41m[m
[32m+[m	[32mif(*ELMStatus == connecting && (loopTime < (*ELMConnectStartTime + ELMConnectTimeout*1000))) {[m[41m[m
[32m+[m		[32mstring ELMResponseString = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m			[32mif(!ELMResponseString.empty()) {[m[41m[m
[32m+[m				[32m*ELMStatus = connected;[m[41m[m
[32m+[m				[32m//ELMConnectionStatusButton.setText("ELM Connected");[m[41m[m
[32m+[m					[32mstring resp = "";[m[41m[m
[32m+[m					[32mELMSerial->serialWrite("ATE0"); // set elm327 output for NO ECHO[m[41m[m
[32m+[m					[32mwhile(resp.empty()) {[m[41m[m
[32m+[m						[32mresp = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m					[32m}[m[41m[m
[32m+[m					[32mresp = "";[m[41m[m
[32m+[m					[32mELMSerial->serialWrite("ATSP0");	// set ELM327 to automatically detect protocol[m[41m[m
[32m+[m					[32mwhile(resp.empty()) {[m[41m[m
[32m+[m						[32mresp = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m					[32m}[m[41m[m
[32m+[m			[32m}[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m	[32m// ELM327 connection timeout[m[41m[m
[32m+[m	[32mif(*ELMStatus == connecting && (loopTime >= (*ELMConnectStartTime + ELMConnectTimeout*1000))) {[m[41m		[m
[32m+[m		[32m*ELMStatus = disconnected;[m[41m[m
[32m+[m		[32m//ELMConnectionStatusButton.setText("ELM Timeout");[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m	[32m// Reqest ELM327 Version information[m[41m[m
[32m+[m	[32mif(*ELMStatus == connected && *ELMVersionStat == unknown) {[m[41m			[m
[32m+[m		[32mELMSerial->serialWrite("ATI");[m[41m[m
[32m+[m		[32m*ELMVersionStat = requested;[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m// Requesting ELM327 Version information[m[41m[m
[32m+[m	[32mif(*ELMVersionStat == requested) {[m[41m[m
[32m+[m		[32m*ELMVersion = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m		[32mif(!ELMVersion->empty()){[m[41m[m
[32m+[m			[32m*ELMVersionStat = known;[m[41m [m
[32m+[m			[32m//ELMConnectionStatusButton.setText(*ELMVersion);[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m	[m
[32m+[m	[32m// Connect to the ECU after recieving ELM Version information[m[41m[m
[32m+[m	[32mif(*ELMVersionStat == known && *ECUStatus == disconnected) {[m[41m[m
[32m+[m		[32m*ECUStatus = connecting;[m[41m[m
[32m+[m		[32mELMSerial->serialWrite("0101");[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m	[m
[32m+[m	[32m// Connecting to the ECU[m[41m[m
[32m+[m	[32mif(*ECUStatus == connecting ) {[m[41m[m
[32m+[m		[32mstring ECUResponseString = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m		[32mif(!ECUResponseString.empty()) {[m[41m[m
[32m+[m			[32mcout << ECUResponseString << endl;[m[41m[m
[32m+[m			[32m*ECUConnectTries++;[m[41m[m
[32m+[m[41m			[m
[32m+[m			[32mif(ECUResponseString.find("41 01") != string::npos) {[m[41m[m
[32m+[m				[32m*ECUStatus = connected;[m[41m[m
[32m+[m			[32m}[m[41m[m
[32m+[m			[32melse {[m[41m[m
[32m+[m				[32m*ECUStatus = disconnected;[m[41m[m
[32m+[m				[32mECUResponseString = "";[m[41m[m
[32m+[m			[32m}[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m// Request current connection protocol information after connecting to the ECU[m[41m[m
[32m+[m	[32mif(*ECUStatus == connected && *ProtocolStat == unknown){[m[41m[m
[32m+[m		[32mELMSerial->serialWrite("ATDP");[m[41m[m
[32m+[m		[32m*ProtocolStat = requested;[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m// Requesting protocol information[m[41m[m
[32m+[m	[32mif(*ProtocolStat == requested) {[m[41m[m
[32m+[m		[32m*Protocol = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m		[32mif(!Protocol->empty()){[m[41m[m
[32m+[m			[32m*ProtocolStat = known;[m[41m [m
[32m+[m			[32m//ECUConnectionStatusButton.setText(*Protocol);[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m	[m
[32m+[m	[32m// Requestiing PID support from ECU (assuming protocol known)[m[41m[m
[32m+[m	[32mif(*ProtocolStat == known && *PIDSupportRequestStatus == unknown) {[m[41m[m
[32m+[m		[32mstring requestPIDString = "0";[m[41m[m
[32m+[m		[32mrequestPIDString.append(std::to_string(*currentPIDSupportRequest) );	//"0100" first time around[m[41m[m
[32m+[m		[32mSupportPIDs.emplace_back(requestPIDString);[m[41m[m
[32m+[m		[32mELMSerial->serialWrite(SupportPIDs.back().getCommand());[m[41m[m
[32m+[m		[32m*PIDSupportRequestStatus = requested;[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m	[m
[32m+[m	[32m// Waiting on some PID support request response[m[41m[m
[32m+[m	[32mif(*PIDSupportRequestStatus == requested) {[m[41m[m
[32m+[m		[32mstring resp = ELMSerial->serialReadUntil();[m[41m[m
[32m+[m		[32mif(!resp.empty()) {[m[41m[m
[32m+[m			[32mSupportPIDs.back().update(resp, loopTime);[m[41m[m
[32m+[m[41m			[m
[32m+[m			[32mcout << " we think 0120 support state is here: " << SupportPIDs.back().getBitPositionName(31) << endl;[m[41m[m
[32m+[m[41m		[m
[32m+[m			[32m// Move on to next PID support request[m[41m[m
[32m+[m			[32mif(SupportPIDs.back().getBitPositionValue(31) && *currentPIDSupportRequest < 160) {[m[41m[m
[32m+[m				[32m*PIDSupportRequestStatus = unknown;[m[41m[m
[32m+[m				[32m*currentPIDSupportRequest += 20;[m[41m[m
[32m+[m			[32m}[m[41m[m
[32m+[m			[32m// Or stop here (all PID support queries complete)[m[41m[m
[32m+[m			[32melse[m[41m[m
[32m+[m				[32m*PIDSupportRequestStatus = known;[m[41m[m
[32m+[m		[32m}[m[41m[m
[32m+[m	[32m}[m[41m[m
[32m+[m[41m	[m
[32m+[m[32m} // END CONNECTION MANAGER[m
\ No newline at end of file[m
[1mdiff --git a/ConnectionManager.h b/ConnectionManager.h[m
[1mnew file mode 100644[m
[1mindex 0000000..1e1ef42[m
[1m--- /dev/null[m
[1m+++ b/ConnectionManager.h[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32m#ifndef ConnectionManager_H[m[41m[m
[32m+[m[32m#define ConnectionManager_H[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#include "PID.h"[m[41m[m
[32m+[m[32m#include "Serial.h"[m[41m[m
[32m+[m[32m#include <vector>[m[41m[m
[32m+[m[32m#include <iostream>[m[41m[m
[32m+[m[32m#include <string>[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32musing namespace std;[m[41m[m
[32m+[m[41m[m
[32m+[m[32m// Connection Status Enums[m[41m[m
[32m+[m[32menum ConnectionStatus {[m[41m[m
[32m+[m	[32mdisconnected,[m[41m[m
[32m+[m	[32mconnecting,[m[41m[m
[32m+[m	[32mconnected[m[41m[m
[32m+[m[32m};[m[41m[m
[32m+[m[41m[m
[32m+[m[32menum ParmStatus {[m[41m[m
[32m+[m	[32munknown,[m[41m[m
[32m+[m	[32mrequested,[m[41m[m
[32m+[m	[32mknown[m[41m[m
[32m+[m[32m};[m[41m[m
[32m+[m[41m[m
[32m+[m[32mvoid ConnectionManager(uint64_t  , Serial* , ConnectionStatus* , uint64_t* , ParmStatus*  ,string* , ConnectionStatus*  , int* , ParmStatus*  , string*  , ParmStatus*  , int*, std::vector<PID>& );[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#endif[m
\ No newline at end of file[m
[1mdiff --git a/DisplayObjectManager.cpp b/DisplayObjectManager.cpp[m
[1mindex 36b8864..8ba24f8 100644[m
[1m--- a/DisplayObjectManager.cpp[m
[1m+++ b/DisplayObjectManager.cpp[m
[36m@@ -2,7 +2,7 @@[m
 [m
 using namespace std;[m
 [m
[31m-void DisplayObjectManager(std::vector<Button>& HotButtons, std::vector<Gauge>& Gauges, std::vector<PID>& PIDs, std::vector<Menu>& Menus){[m
[32m+[m[32mvoid DisplayObjectManager(std::vector<Button>& HotButtons, std::vector<Gauge>& Gauges, std::vector<PID>& PIDs, std::vector<PID>& SupportPIDs, ParmStatus* PIDSupportRequestStatus, std::vector<Menu>& Menus){[m[41m[m
 [m
 	int width = 800;[m
 	int height = 480;[m
[36m@@ -30,18 +30,42 @@[m [mvoid DisplayObjectManager(std::vector<Button>& HotButtons, std::vector<Gauge>& G[m
 			for (std::vector<Gauge>::iterator g = Gauges.begin(); g != Gauges.end(); g++)[m
 				g->touchDisable();[m
 			Menus.emplace_back(width/6, (height/2)-30, (width/3) - 10, height-70, "HOTBUTTON_GroupMenu");[m
[31m-			string defaultGroup = "g1";[m
[32m+[m			[32mstring defaultGroup = "standardPIDMenu";[m[41m[m
 			Menus.back().selectButton(defaultGroup);[m
 			Menus.emplace_back(width-width/6, (height/2)-30, (width/3)- 10, height-70, "HOTBUTTON_DisplayObjectMenu");[m
[31m-			cout << "default group: " << defaultGroup << endl;[m
 			Menus.emplace_back(width/2, (height/2)-30, (width/3)- 10, height-70, defaultGroup);[m
[32m+[m[41m			[m
[32m+[m[41m			[m
[32m+[m[41m			[m
[32m+[m[41m			[m
[32m+[m			[32m// Not part of connection manager - generates menu / tables of supported PIDs[m[41m[m
[32m+[m			[32m// PIDSupportRequestsComplete is flag to run once[m[41m[m
[32m+[m			[32mif(*PIDSupportRequestStatus == known) {[m[41m[m
[32m+[m				[32mint numSupportPIDs = SupportPIDs.size();[m[41m[m
[32m+[m				[32mint PIDidx = 0;[m[41m[m
[32m+[m				[32mbool* PIDSupportStates = new bool[numSupportPIDs*31];[m[41m[m
[32m+[m				[32mstring* PIDSupportNames = new string[numSupportPIDs*31];[m[41m[m
[32m+[m				[32mstring* PIDSupportLabels = new string[numSupportPIDs*31];[m[41m[m
[32m+[m				[32mfor(std::vector<PID>::iterator it = SupportPIDs.begin(); it != SupportPIDs.end(); it++)  {[m[41m[m
[32m+[m					[32mfor(int p = 0; p<30; p++) {[m[41m[m
[32m+[m						[32mPIDSupportStates[PIDidx] = (it)->getBitPositionValue(p);[m[41m[m
[32m+[m						[32mPIDSupportNames[PIDidx] = (it)->getBitPositionName(p);[m[41m[m
[32m+[m						[32mPIDSupportLabels[PIDidx] = (it)->getBitPositionLabel(p);[m[41m[m
[32m+[m[41m						[m
[32m+[m						[32mif(PIDSupportStates[PIDidx]) {[m[41m[m
[32m+[m							[32mMenus.back().addItem(PIDSupportNames[PIDidx], PIDSupportLabels[PIDidx]);[m[41m[m
[32m+[m						[32m}[m[41m[m
[32m+[m						[32mPIDidx++;[m[41m[m
[32m+[m					[32m}[m[41m[m
[32m+[m				[32m}[m[41m[m
[32m+[m			[32m}[m[41m[m
 		}[m
 [m
 		// If hotbutton is selected - set selected button iterator[m
 		if(currentHotButton->isSelected()) selectedHotbutton_It = currentHotButton;[m
 	}[m
 [m
[31m-	// Create menus if menus are not present[m
[32m+[m	[32m// If menus are present[m[41m[m
 	if(Menus.size() != 0) {[m
 [m
 		string name = "HOTBUTTON_GroupMenu";[m
[36m@@ -58,7 +82,6 @@[m [mvoid DisplayObjectManager(std::vector<Button>& HotButtons, std::vector<Gauge>& G[m
 		}[m
 		[m
 		if(HOTBUTTON_GroupMenu_It->getSelectedButtonName().compare(HOTBUTTON_ParameterMenu_It->menuIdentifier) != 0) {[m
[31m-			cout << "changing parameter menu to: "<<  HOTBUTTON_GroupMenu_It->getSelectedButtonName() << endl; [m
 			Menus.erase(HOTBUTTON_ParameterMenu_It);[m
 			Menus.emplace_back(width/2, (height/2)-30, (width/3)- 10, height-70, HOTBUTTON_GroupMenu_It->getSelectedButtonName());[m
 			type = HOTBUTTON_GroupMenu_It->getSelectedButtonName();[m
[1mdiff --git a/DisplayObjectManager.h b/DisplayObjectManager.h[m
[1mindex b795d44..a4b67b1 100644[m
[1m--- a/DisplayObjectManager.h[m
[1m+++ b/DisplayObjectManager.h[m
[36m@@ -10,10 +10,11 @@[m
 # include "Menu.h"[m
 #include <iostream>[m
 #include <algorithm>		// find_if[m
[32m+[m[32m#include "ConnectionManager.h"[m[41m[m
 [m
 using namespace std;[m
 [m
[31m-void DisplayObjectManager(std::vector<Button>&, std::vector<Gauge>&, std::vector<PID>&, std::vector<Menu>&);[m
[32m+[m[32mvoid DisplayObjectManager(std::vector<Button>&, std::vector<Gauge>&, std::vector<PID>&, std::vector<PID>&, ParmStatus*, std::vector<Menu>&);[m[41m[m
 [m
 [m
 [m
[1mdiff --git a/Makefile b/Makefile[m
[1mindex b35a118..2296504 100755[m
[1m--- a/Makefile[m
[1m+++ b/Makefile[m
[36m@@ -1,7 +1,7 @@[m
 CXX=distcc arm-linux-gnueabihf-g++ -std=gnu++0x $(INCLUDEFLAGS) -g[m
 INCLUDEFLAGS=-I/opt/vc/include -I/opt/vc/include/interface/vmcs_host/linux -I/opt/vc/include/interface/vcos/pthreads -I.. -I/home/pi/config4cpp/include[m
 LIBFLAGS=-L/opt/vc/lib -L/opt/vc/lib -L/home/pi/config4cpp/lib -lGLESv2 -lEGL -lbcm_host -lpthread  -ljpeg[m
[31m-objects = touchscreen.o Gauge.o TouchableObject.o DisplayableObject.o DataStream.o Button.o TextView.o Menu.o Serial.o parsingUtilities.o PID.o modeManager.o DisplayObjectManager.o PIDVectorManager.o main.o[m
[32m+[m[32mobjects = touchscreen.o Gauge.o TouchableObject.o DisplayableObject.o DataStream.o Button.o TextView.o Menu.o Serial.o parsingUtilities.o PID.o modeManager.o DisplayObjectManager.o PIDVectorManager.o ConnectionManager.o main.o[m
 [m
 all: $(objects) car-datadisplay[m
 [m
[36m@@ -21,6 +21,7 @@[m [mPID.o: PID.cpp[m
 modeManager.o: modeManager.cpp[m
 DisplayObjectManager.o: DisplayObjectManager.cpp[m
 PIDVectorManager.o: PIDVectorManager.cpp[m
[32m+[m[32mConnectionManager.o: ConnectionManager.cpp[m
 [m
 [m
 car-datadisplay: car-datadisplay $(objects)[m
[1mdiff --git a/MenuConf b/MenuConf[m
[1mindex 686e911..52fe3ec 100644[m
[1m--- a/MenuConf[m
[1m+++ b/MenuConf[m
[36m@@ -49,44 +49,6 @@[m [mModeMenu {[m
 };[m
 [m
 [m
[31m-SupportedPIDMenu {[m
[31m-	name = "SupportedPIDMenu";[m
[31m-	type = "...";[m
[31m-	titled = "true";[m
[31m-	titlePercentHeight = "9";[m
[31m-	titleText = "Supported PIDs";[m
[31m-	titleFontSize = "20";[m
[31m-	titleColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	scrollable = "true";[m
[31m-	scrollItems = "7";[m
[31m-	scrollButtonPercentHeight = "15";[m
[31m-	prevButton = "true";[m
[31m-	prevButtonText = "PREV";[m
[31m-	nextButton = "true";[m
[31m-	nextButtonText = "NEXT";[m
[31m-	totalItems = "0";[m
[31m-	numButtons = "7";[m
[31m-	buttonPadding = "7";[m
[31m-	cornerRadius = "0";[m
[31m-	borderWidth = "1";[m
[31m-	borderColor = ["0.43", "0.43", "0.43", "0.0"];[m
[31m-	backgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
[31m-	pressDebounce = "500";[m
[31m-	isHorizontal = "false";[m
[31m-	selectMode = "radio";[m
[31m-	hideable = "false";[m
[31m-	configureButtons = "true";[m
[31m-	buttonCornerRadius = "0";[m
[31m-	buttonBorderWidth = "2";[m
[31m-	buttonBorderColor = ["0.43", "0.43", "0.43", "1.0"];[m
[31m-	buttonBackgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
[31m-	buttonTextColor = ["1.0", "1.0", "1.0", "1.0"];[m
[31m-	buttonSelectedBackgroundColor = ["0.43", "0.43", "0.43", "0.4"];[m
[31m-	buttonSelectedBorderColor = ["1.0", "1.0", "1.0", "1.0"];[m
[31m-	buttonSelectedBorderWidth = "2";[m
[31m-	buttonSelectedTextColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-};[m
[31m-[m
 HOTBUTTON_GroupMenu {[m
 	name = "HOTBUTTON_GroupMenu";[m
 	type = "...";[m
[36m@@ -117,79 +79,37 @@[m [mHOTBUTTON_GroupMenu {[m
 	buttonSelectedBorderColor = ["1.0", "1.0", "1.0", "1.0"];[m
 	buttonSelectedBorderWidth = "2";[m
 	buttonSelectedTextColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	buttonName1 = "g1";[m
[32m+[m	[32mbuttonName1 = "standardPIDMenu";[m[41m[m
 	buttonText1 = "Standard";[m
[31m-	buttonName2 = "g2";[m
[32m+[m	[32mbuttonName2 = "extendedPIDMenu";[m[41m[m
 	buttonText2 = "Extended";[m
 };[m
 [m
[31m-HOTBUTTON_DisplayObjectMenu {[m
[31m-	name = "HOTBUTTON_DisplayObjectMenu";[m
[31m-	type = "...";[m
[31m-	titled = "true";[m
[31m-	titlePercentHeight = "9";[m
[31m-	titleText = "Display Object";[m
[31m-	titleFontSize = "20";[m
[31m-	titleColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	scrollable = "false";[m
[31m-	numButtons = "5";[m
[31m-	totalItems = "5";[m
[31m-	buttonPadding = "7";[m
[31m-	cornerRadius = "0";[m
[31m-	borderWidth = "1";[m
[31m-	borderColor = ["0.43", "0.43", "0.43", "0.0"];[m
[31m-	backgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
[31m-	pressDebounce = "500";[m
[31m-	isHorizontal = "false";[m
[31m-	selectMode = "radio";[m
[31m-	hideable = "false";[m
[31m-	configureButtons = "true";[m
[31m-	buttonCornerRadius = "0";[m
[31m-	buttonBorderWidth = "2";[m
[31m-	buttonBorderColor = ["0.43", "0.43", "0.43", "1.0"];[m
[31m-	buttonBackgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
[31m-	buttonTextColor = ["1.0", "1.0", "1.0", "1.0"];[m
[31m-	buttonSelectedBackgroundColor = ["0.43", "0.43", "0.43", "0.4"];[m
[31m-	buttonSelectedBorderColor = ["1.0", "1.0", "1.0", "1.0"];[m
[31m-	buttonSelectedBorderWidth = "2";[m
[31m-	buttonSelectedTextColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	buttonName1 = "Gauge";[m
[31m-	buttonText1 = "Gauge";[m
[31m-	buttonName2 = "g2";[m
[31m-	buttonText2 = "Graph";[m
[31m-	buttonName3 = "g3";[m
[31m-	buttonText3 = "Readout";[m
[31m-	buttonName4 = "g4";[m
[31m-	buttonText4 = "Tape";[m
[31m-	buttonName5 = "g5";[m
[31m-	buttonText5 = "Other";[m
[31m-};[m
[31m-[m
[31m-g1 {[m
[32m+[m[32mstandardPIDMenu {[m[41m[m
[32m+[m	[32mname = "standardPIDMenu";[m[41m[m
 	type = "ParameterMenu";[m
 	titled = "true";[m
 	titlePercentHeight = "9";[m
[31m-	titleText = "Parameters";[m
[32m+[m	[32mtitleText = "Supported PIDs";[m[41m[m
 	titleFontSize = "20";[m
 	titleColor = ["1.0", "0.0", "0.0", "1.0"];[m
 	scrollable = "true";[m
[31m-	totalItems = "64";[m
[31m-	scrollItems = "8";[m
[31m-	scrollButtonPercentHeight = "10";[m
[32m+[m	[32mscrollItems = "7";[m[41m[m
[32m+[m	[32mscrollButtonPercentHeight = "15";[m[41m[m
 	prevButton = "true";[m
 	prevButtonText = "PREV";[m
 	nextButton = "true";[m
 	nextButtonText = "NEXT";[m
[31m-	numButtons = "8";[m
[32m+[m	[32mtotalItems = "0";[m[41m[m
[32m+[m	[32mnumButtons = "7";[m[41m[m
 	buttonPadding = "7";[m
 	cornerRadius = "0";[m
 	borderWidth = "1";[m
[31m-	borderColor = ["0.43", "0.43", "0.43", "1.0"];[m
[32m+[m	[32mborderColor = ["0.43", "0.43", "0.43", "0.0"];[m[41m[m
 	backgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
 	pressDebounce = "500";[m
 	isHorizontal = "false";[m
 	selectMode = "radio";[m
[31m-	timedSelectDuration = "250";[m
 	hideable = "false";[m
 	configureButtons = "true";[m
 	buttonCornerRadius = "0";[m
[36m@@ -201,144 +121,10 @@[m [mg1 {[m
 	buttonSelectedBorderColor = ["1.0", "1.0", "1.0", "1.0"];[m
 	buttonSelectedBorderWidth = "2";[m
 	buttonSelectedTextColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	buttonName1 = "0100";[m
[31m-	buttonText1 = "0100 Supp. PIDs 1-20";[m
[31m-	buttonName2 = "0101";[m
[31m-	buttonText2 = "0101 Monitor Sts";[m
[31m-	buttonName3 = "0102";[m
[31m-	buttonText3 = "0102 Freeze DTC";[m
[31m-	buttonName4 = "0103";[m
[31m-	buttonText4 = "0103 Fuel Sts";[m
[31m-	buttonName5 = "0104";[m
[31m-	buttonText5 = "0104 Calc Load";[m
[31m-	buttonName6 = "0105";[m
[31m-	buttonText6 = "0105 Eng Cool Temp";[m
[31m-	buttonName7 = "0106";[m
[31m-	buttonText7 = "0106 Bank1 STFT";[m
[31m-	buttonName8 = "0107";[m
[31m-	buttonText8 = "0107 Bank1 LTFT";[m
[31m-	buttonName9 = "0108";[m
[31m-	buttonText9 = "0108 Bank2 STFT";[m
[31m-	buttonName10 = "0109";[m
[31m-	buttonText10 = "0109 Bank2 LTFT";[m
[31m-	buttonName11 = "010A";[m
[31m-	buttonText11 = "010A Fuel Press";[m
[31m-	buttonName12 = "010B";[m
[31m-	buttonText12 = "010B Man Abs Press";[m
[31m-	buttonName13 = "010C";[m
[31m-	buttonText13 = "010C Eng RPM";[m
[31m-	buttonName14 = "010D";[m
[31m-	buttonText14 = "010D Veh Speed";[m
[31m-	buttonName15 = "010E";[m
[31m-	buttonText15 = "010E Timing Adv";[m
[31m-	buttonName16 = "010F";[m
[31m-	buttonText16 = "010F Int Air Temp";[m
[31m-	buttonName17 = "0110";[m
[31m-	buttonText17 = "0110 MAF Air Flow Rate";[m
[31m-	buttonName18 = "0111";[m
[31m-	buttonText18 = "0111 Throttle Position";[m
[31m-	buttonName19 = "0112";[m
[31m-	buttonText19 = "0112 Cmd Sec Air Sts";[m
[31m-	buttonName20 = "0113";[m
[31m-	buttonText20 = "0113 O2 Sensors Present";[m
[31m-	buttonName21 = "0114";[m
[31m-	buttonText21 = "0114 Bank1 S1 Voltage / STFT";[m
[31m-	buttonName22 = "0115";[m
[31m-	buttonText22 = "0115 Bank1 S2 Voltage / STFT";[m
[31m-	buttonName23 = "0116";[m
[31m-	buttonText23 = "0116 Bank1 S3 Voltage / STFT";[m
[31m-	buttonName24 = "0117";[m
[31m-	buttonText24 = "0117 Bank1 S4 Voltage / STFT";[m
[31m-	buttonName25 = "0118";[m
[31m-	buttonText25 = "0118 Bank2 S1 Voltage / STFT";[m
[31m-	buttonName26 = "0119";[m
[31m-	buttonText26 = "0119 Bank2 S2 Voltage / STFT";[m
[31m-	buttonName27 = "011A";[m
[31m-	buttonText27 = "011A Bank2 S3 Voltage / STFT";[m
[31m-	buttonName28 = "011B";[m
[31m-	buttonText28 = "011B Bank2 S4 Voltage / STFT";[m
[31m-	buttonName29 = "011C";[m
[31m-	buttonText29 = "011C OBD Standards";[m
[31m-	buttonName30 = "011D";[m
[31m-	buttonText30 = "011D O2 Sensors Present(2)";[m
[31m-	buttonName31 = "011E";[m
[31m-	buttonText31 = "011E Aux Input Sts";[m
[31m-	buttonName32 = "011F";[m
[31m-	buttonText32 = "011F Run Time";[m
[31m-	buttonName33 = "0120";[m
[31m-	buttonText33 = "0120 Sup. PIDs 21-40";[m
[31m-	buttonName34 = "0121";[m
[31m-	buttonText34 = "0121 Distance with MIL On";[m
[31m-	buttonName35 = "0122";[m
[31m-	buttonText35 = "0122 Fuel Rail Pres (Rel)";[m
[31m-	buttonName36 = "0123";[m
[31m-	buttonText36 = "0123 Fuel Rail Pres (GDI)";[m
[31m-	buttonName37 = "0124";[m
[31m-	buttonText37 = "0124 O2S1_WR_lambda Ratio / Voltage";[m
[31m-	buttonName38 = "0125";[m
[31m-	buttonText38 = "0125 O2S2_WR_lambda Ratio / Voltage";[m
[31m-	buttonName39 = "0126";[m
[31m-	buttonText39 = "0126 O2S3_WR_lambda Ratio / Voltage";[m
[31m-	buttonName40 = "0127";[m
[31m-	buttonText40 = "0127 O2S4_WR_lambda Ratio / Voltage";[m
[31m-	buttonName41 = "0128";[m
[31m-	buttonText41 = "0128 O2S5_WR_lambda Ratio / Voltage";[m
[31m-	buttonName42 = "0129";[m
[31m-	buttonText42 = "0129 O2S6_WR_lambda Ratio / Voltage";[m
[31m-	buttonName43 = "012A";[m
[31m-	buttonText43 = "012A O2S7_WR_lambda Ratio / Voltage";[m
[31m-	buttonName44 = "012B";[m
[31m-	buttonText44 = "012B O2S8_WR_lambda Ratio / Voltage";[m
[31m-	buttonName45 = "012C";[m
[31m-	buttonText45 = "012C Commanded EGR";[m
[31m-	buttonName46 = "012D";[m
[31m-	buttonText46 = "012D EGR Error";[m
[31m-	buttonName47 = "012E";[m
[31m-	buttonText47 = "012E Commanded Evap Purge";[m
[31m-	buttonName48 = "012F";[m
[31m-	buttonText48 = "012F Fuel Level Input";[m
[31m-	buttonName49 = "0130";[m
[31m-	buttonText49 = "0130 Warmups After Codes Cleared";[m
[31m-	buttonName50 = "0131";[m
[31m-	buttonText50 = "0131 Distance After Codes Cleared";[m
[31m-	buttonName51 = "0132";[m
[31m-	buttonText51 = "0132 Evap Sys Vapor Pressure";[m
[31m-	buttonName52 = "0133";[m
[31m-	buttonText52 = "0133 Barometric Pressure";[m
[31m-	buttonName53 = "0134";[m
[31m-	buttonText53 = "0134 O2S1_WR_lambda Ratio / Current";[m
[31m-	buttonName54 = "0135";[m
[31m-	buttonText54 = "0135 O2S2_WR_lambda Ratio / Current";[m
[31m-	buttonName55 = "0136";[m
[31m-	buttonText55 = "0136 O2S3_WR_lambda Ratio / Current";[m
[31m-	buttonName56 = "0137";[m
[31m-	buttonText56 = "0137 O2S4_WR_lambda Ratio / Current";[m
[31m-	buttonName57 = "0138";[m
[31m-	buttonText57 = "0138 O2S5_WR_lambda Ratio / Current";[m
[31m-	buttonName58 = "0139";[m
[31m-	buttonText58 = "0139 O2S6_WR_lambda Ratio / Current";[m
[31m-	buttonName59 = "013A";[m
[31m-	buttonText59 = "013A O2S7_WR_lambda Ratio / Current";[m
[31m-	buttonName60 = "013B";[m
[31m-	buttonText60 = "013B O2S8_WR_lambda Ratio / Current";[m
[31m-	buttonName61 = "013C";[m
[31m-	buttonText61 = "013C Cat Temp Bank1 S1";[m
[31m-	buttonName62 = "013D";[m
[31m-	buttonText62 = "013D Cat Temp Bank2 S1";[m
[31m-	buttonName63 = "013E";[m
[31m-	buttonText63 = "013E Cat Temp Bank1 S2";[m
[31m-	buttonName64 = "013F";[m
[31m-	buttonText64 = "013F Cat Temp Bank2 S2";[m
[31m-[m
[31m-[m
[31m-[m
[31m-}[m
[31m-[m
[31m-[m
[31m-[m
[32m+[m[32m};[m[41m[m
 [m
[31m-g2 {[m
[31m-	name = "g2";[m
[32m+[m[32mextendedPIDMenu {[m[41m[m
[32m+[m	[32mname = "extendedPIDMenu";[m[41m[m
 	type = "ParameterMenu";[m
 	titled = "true";[m
 	titlePercentHeight = "9";[m
[36m@@ -379,20 +165,25 @@[m [mg2 {[m
 };[m
 [m
 [m
[31m-SerialViewerMenu {[m
[32m+[m[32mHOTBUTTON_DisplayObjectMenu {[m[41m[m
[32m+[m	[32mname = "HOTBUTTON_DisplayObjectMenu";[m[41m[m
 	type = "...";[m
[31m-	titled = "false";[m
[32m+[m	[32mtitled = "true";[m[41m[m
[32m+[m	[32mtitlePercentHeight = "9";[m[41m[m
[32m+[m	[32mtitleText = "Display Object";[m[41m[m
[32m+[m	[32mtitleFontSize = "20";[m[41m[m
[32m+[m	[32mtitleColor = ["1.0", "0.0", "0.0", "1.0"];[m[41m[m
 	scrollable = "false";[m
[31m-	numButtons = "4";[m
[32m+[m	[32mnumButtons = "5";[m[41m[m
[32m+[m	[32mtotalItems = "5";[m[41m[m
 	buttonPadding = "7";[m
 	cornerRadius = "0";[m
 	borderWidth = "1";[m
[31m-	borderColor = ["0.43", "0.43", "0.43", "1.0"];[m
[32m+[m	[32mborderColor = ["0.43", "0.43", "0.43", "0.0"];[m[41m[m
 	backgroundColor = ["0.0", "0.0", "0.0", "0.6"];[m
 	pressDebounce = "500";[m
[31m-	isHorizontal = "true";[m
[31m-	selectMode = "timed";[m
[31m-	timedSelectDuration = "200";[m
[32m+[m	[32misHorizontal = "false";[m[41m[m
[32m+[m	[32mselectMode = "radio";[m[41m[m
 	hideable = "false";[m
 	configureButtons = "true";[m
 	buttonCornerRadius = "0";[m
[36m@@ -404,13 +195,21 @@[m [mSerialViewerMenu {[m
 	buttonSelectedBorderColor = ["1.0", "1.0", "1.0", "1.0"];[m
 	buttonSelectedBorderWidth = "2";[m
 	buttonSelectedTextColor = ["1.0", "0.0", "0.0", "1.0"];[m
[31m-	buttonName1 = "Reset";[m
[31m-	buttonText1 = "Reset";[m
[31m-	buttonName2 = "Auto";[m
[31m-	buttonText2 = "Auto";[m
[31m-	buttonName3 = "Disp";[m
[31m-	buttonText3 = "Disp";[m
[31m-	buttonName4 = "Clear";[m
[31m-	buttonText4 = "Clear";[m
[32m+[m	[32mbuttonName1 = "Gauge";[m[41m[m
[32m+[m	[32mbuttonText1 = "Gauge";[m[41m[m
[32m+[m	[32mbuttonName2 = "g2";[m[41m[m
[32m+[m	[32mbuttonText2 = "Graph";[m[41m[m
[32m+[m	[32mbuttonName3 = "g3";[m[41m[m
[32m+[m	[32mbuttonText3 = "Readout";[m[41m[m
[32m+[m	[32mbuttonName4 = "g4";[m[41m[m
[32m+[m	[32mbuttonText4 = "Tape";[m[41m[m
[32m+[m	[32mbuttonName5 = "g5";[m[41m[m
[32m+[m	[32mbuttonText5 = "Other";[m[41m[m
 };[m
 [m
[41m+[m
[41m+[m
[41m+[m
[41m+[m
[41m+[m
[41m+[m
[1mdiff --git a/car-datadisplay b/car-datadisplay[m
[1mindex 455c7be..2a8112e 100644[m
Binary files a/car-datadisplay and b/car-datadisplay differ
[1mdiff --git a/main.cpp b/main.cpp[m
[1mindex e6d3907..96afab9 100644[m
[1m--- a/main.cpp[m
[1m+++ b/main.cpp[m
[36m@@ -33,7 +33,7 @@[m [musing namespace std;[m
 #include "modeManager.h"[m
 #include "DisplayObjectManager.h"[m
 #include "PIDVectorManager.h"[m
[31m-[m
[32m+[m[32m#include "ConnectionManager.h"[m
 [m
 // Loop time[m
 uint64_t loopTime;[m
[36m@@ -54,11 +54,6 @@[m [muint64_t secondLastPIDVectorUpdateTime = 0;[m
 ApplicationMode currentMode = noMode;			// Current application mode[m
 ApplicationMode previousMode = noMode;			// Previous application mode, for mode change detection[m
 [m
[31m-// Connection Status Enums[m
[31m-enum ConnectionStatus { disconnected, connecting, connected };[m
[31m-[m
[31m-enum ParmStatus { unknown, requested, known };[m
[31m-[m
 //Dashboard mode vectors and states[m
 vector<Button> DASHBOARD_HotButtons;[m
 vector<Gauge> DASHBOARD_Gauges;[m
[36m@@ -152,35 +147,28 @@[m [mint main() {[m
 	// ELM connection and ECU connection status[m
 	ConnectionStatus 	ELMStatus 					= disconnected;[m
 	uint64_t ELMConnectStartTime 	= 0;[m
[31m-	int 		ELMConnectTimeout 	= 1000; 					// Timeout, milliseconds[m
[31m-	string 	ELMResponseString 	= "";[m
[32m+[m
[32m+[m
 	string 						ELMVersion 					= "";[m
 	ParmStatus 				ELMVersionStat 			= unknown;[m
 	string 						Protocol 						= "";[m
 	ParmStatus 				ProtocolStat 				= unknown;[m
 	ConnectionStatus 	ECUStatus 					= disconnected;[m
 	int 							ECUConnectTries 		= 0;[m
[31m-	string 						ECUResponseString 	= "";[m
 	string 						VIN 								= "";[m
 	ParmStatus 				VINStat 						= unknown;[m
 	[m
 	uint64_t lastLoopTime = 0;[m
 	[m
 	[m
[31m-	// PID support [m
[31m-[m
[31m-	Menu SupportedPIDMenu(width/2, height/2, width/3-20, 360, "SupportedPIDMenu");[m
[31m-			[m
[32m+[m	[32m// PID support[m[41m 		[m
 	vector<PID> SupportPIDs;			// PID support queries[m
[31m-	[m
 	ParmStatus PIDSupportRequestStatus 	= unknown;[m
 	int currentPIDSupportRequest 				= 100;[m
[31m-	[m
 	bool PIDSupportRequestsComplete = false;[m
 [m
 [m
 	// Log Mode[m
[31m-[m
 	bool logging = false;[m
 [m
 	Button NewLogButton(width/8, height-80, width/4 - 20, 40, "NewLogButton");[m
[36m@@ -245,127 +233,19 @@[m [mint main() {[m
 		[m
 		loopTouch = threadTouch;											// Get touch for loop[m
 		loopTime = bcm2835_st_read();										// Get time for loop[m
[31m-		//serialData = ELMSerial.serialReadUntil();							// Get serial data for loop[m
[32m+[m
 		vgSetPixels(0, 0, BackgroundImage, 0, 0, 800, 480);					// Draw background image[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m[41m		[m
 		ModeMenu.update(&loopTouch);										// Update mode menu[m
[31m-[m
[31m-	[m
[31m-	// Autoconnection and connection statusing logic	[m
[31m-	if(ELMStatus == disconnected) {[m
[31m-		ELMConnectionStatusButton.setText("ELM Connecting");[m
[31m-		ELMStatus = connecting;[m
[31m-		ELMSerial.serialWrite("ATZ"); //ELM reset[m
[31m-		ELMConnectStartTime = loopTime;		[m
[31m-	}[m
[31m-	if(ELMStatus == connecting && (loopTime < (ELMConnectStartTime + ELMConnectTimeout*1000))) {[m
[31m-		ELMResponseString = ELMSerial.serialReadUntil();[m
[31m-			if(!ELMResponseString.empty()) {[m
[31m-				ELMStatus = connected;[m
[31m-				ELMConnectionStatusButton.setText("ELM Connected");[m
[31m-					string resp = "";[m
[31m-					ELMSerial.serialWrite("ATE0"); // set elm327 output for NO ECHO[m
[31m-					while(resp.empty()) {[m
[31m-						resp = ELMSerial.serialReadUntil();[m
[31m-					}[m
[31m-					resp = "";[m
[31m-					ELMSerial.serialWrite("ATSP0");	// set ELM327 to automatically detect protocol[m
[31m-					while(resp.empty()) {[m
[31m-						resp = ELMSerial.serialReadUntil();[m
[31m-					}[m
[31m-			}[m
[31m-	}[m
[31m-	// ELM327 connection timeout[m
[31m-	if(ELMStatus == connecting && (loopTime >= (ELMConnectStartTime + ELMConnectTimeout*1000))) {		[m
[31m-		ELMStatus = disconnected;[m
[31m-		ELMConnectionStatusButton.setText("ELM Timeout");[m
[31m-	}[m
[31m-	// Reqest ELM327 Version information[m
[31m-	if(ELMStatus == connected && ELMVersionStat == unknown) {			[m
[31m-		ELMSerial.serialWrite("ATI");[m
[31m-		ELMVersionStat = requested;[m
[31m-	}[m
[31m-[m
[31m-	// Requesting ELM327 Version information[m
[31m-	if(ELMVersionStat == requested) {[m
[31m-		ELMVersion = ELMSerial.serialReadUntil();[m
[31m-		if(!ELMVersion.empty()){[m
[31m-			ELMVersionStat = known; [m
[31m-			ELMConnectionStatusButton.setText(ELMVersion);[m
[31m-		}[m
[31m-	}[m
[31m-	[m
[31m-	// Connect to the ECU after recieving ELM Version information[m
[31m-	if(ELMVersionStat == known && ECUStatus == disconnected) {[m
[31m-		ECUStatus = connecting;[m
[31m-		ELMSerial.serialWrite("0101");[m
[31m-	}[m
[31m-	[m
[31m-	// Connecting to the ECU[m
[31m-	if(ECUStatus == connecting ) {[m
[31m-		ECUResponseString = ELMSerial.serialReadUntil();[m
[31m-		if(!ECUResponseString.empty()) {[m
[31m-			cout << ECUResponseString << endl;[m
[31m-			ECUConnectTries++;[m
[31m-			string txt = "ECU Connecting - ";[m
[31m-			cout<<txt<<endl;[m
[31m-			txt.append(std::to_string(ECUConnectTries));[m
[31m-			cout<<txt<<endl;[m
[31m-			ECUConnectionStatusButton.setText(txt);[m
[31m-			if(ECUResponseString.find("41 01") != string::npos) {[m
[31m-				ECUStatus = connected;[m
[31m-			}[m
[31m-			else {[m
[31m-				ECUStatus = disconnected;[m
[31m-				ECUResponseString = "";[m
[31m-			}[m
[31m-		}[m
[31m-[m
[31m-	}[m
[31m-[m
[31m-	// Request current connection protocol information after connecting to the ECU[m
[31m-	if(ECUStatus == connected && ProtocolStat == unknown){[m
[31m-		ELMSerial.serialWrite("ATDP");[m
[31m-		ProtocolStat = requested;[m
[31m-	}[m
[31m-[m
[31m-	// Requesting protocol information[m
[31m-	if(ProtocolStat == requested) {[m
[31m-		Protocol = ELMSerial.serialReadUntil();[m
[31m-		if(!Protocol.empty()){[m
[31m-			ProtocolStat = known; [m
[31m-			ECUConnectionStatusButton.setText(Protocol);[m
[31m-		}[m
[31m-[m
[31m-	}[m
[31m-	[m
[31m-	// Requestiing PID support from ECU (assuming protocol known)[m
[31m-	if(ProtocolStat == known && PIDSupportRequestStatus == unknown) {[m
[31m-		string requestPIDString = "0";[m
[31m-		requestPIDString.append(std::to_string(currentPIDSupportRequest) );	//"0100" first time around[m
[31m-		SupportPIDs.emplace_back(requestPIDString);[m
[31m-		ELMSerial.serialWrite(SupportPIDs.back().getCommand());[m
[31m-		PIDSupportRequestStatus = requested;[m
[31m-	}[m
[31m-	[m
[31m-	// Waiting on some PID support request response[m
[31m-	if(PIDSupportRequestStatus == requested) {[m
[31m-		string resp = ELMSerial.serialReadUntil();[m
[31m-		if(!resp.empty()) {[m
[31m-			SupportPIDs.back().update(resp, loopTime);[m
[31m-			[m
[31m-			cout << " we think 0120 support state is here: " << SupportPIDs.back().getBitPositionName(31) << endl;[m
 		[m
[31m-			// Move on to next PID support request[m
[31m-			if(SupportPIDs.back().getBitPositionValue(31) && currentPIDSupportRequest < 160) {[m
[31m-				PIDSupportRequestStatus = unknown;[m
[31m-				currentPIDSupportRequest += 20;[m
[31m-			}[m
[31m-			// Or stop here[m
[31m-			else[m
[31m-				PIDSupportRequestStatus = known;[m
[31m-		}[m
[31m-	}[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m[41m	[m
 [m
[32m+[m	[32m// Not part of connection manager - generates menu / tables of supported PIDs[m
[32m+[m	[32m// PIDSupportRequestsComplete is flag to run once[m
 	if(PIDSupportRequestStatus == known && !PIDSupportRequestsComplete) {[m
 		PIDSupportRequestsComplete 	= true;[m
 		int numSupportPIDs = SupportPIDs.size();[m
[36m@@ -384,8 +264,6 @@[m [mint main() {[m
 				PIDSupportLabels[PIDidx] = (it)->getBitPositionLabel(p);[m
 					[m
 				if(PIDSupportStates[PIDidx]) {[m
[31m-					cout << "Supported PID " << PIDSupportNames[PIDidx] << endl;[m
[31m-					SupportedPIDMenu.addItem(PIDSupportNames[PIDidx], PIDSupportLabels[PIDidx]);[m
 					numSupportedPIDs++;[m
 				}[m
 				PIDidx++;[m
[36m@@ -398,35 +276,32 @@[m [mint main() {[m
 	[m
 	[m
 	[m
[31m-		[m
[31m-		// TODO: decide if this needs touch and should update the menu - if so remove double update[m
[31m-		modeManager(&ModeMenu, &loopTouch, &previousMode, &currentMode);[m
[31m-[m
[31m-		[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
 		// Framerate button - need to enable / disable[m
 		float refreshRate = 1000000/(loopTime - lastLoopTime);[m
 		lastLoopTime = loopTime;[m
 		FramerateButton.setValue(refreshRate);[m
 		FramerateButton.update();[m
[31m-[m
[31m-		// PID Update rate button[m
[31m-		float PIDUpdateRate;[m
[31m-[m
[31m-		if(lastPIDVectorUpdateTime != secondLastPIDVectorUpdateTime)[m
[31m-			PIDUpdateRate = 1000000/(lastPIDVectorUpdateTime - secondLastPIDVectorUpdateTime);[m
[31m-		else PIDUpdateRate = 0;[m
[31m-[m
[31m-		PIDUpdateRateButton.setValue(PIDUpdateRate);[m
[31m-		PIDUpdateRateButton.update();[m
[31m-[m
[31m-		// Connection status button[m
[31m-		ELMConnectionStatusButton.update();[m
[31m-		ECUConnectionStatusButton.update();[m
 		[m
[31m-		//NumSuportedPIDsButton[m
[31m-		NumSuportedPIDsButton.update();[m
[32m+[m		[32m/******************************************************************************************[m
[32m+[m		[32mManager Function Calls[m
[32m+[m		[32m******************************************************************************************/[m
[32m+[m		[32m// Mode Management[m
[32m+[m		[32mmodeManager(&ModeMenu, &loopTouch, &previousMode, &currentMode);[m
[32m+[m[41m		[m
[32m+[m		[32m// Connection Management (ELM, ECU,Protocol detection, PID support request)[m
[32m+[m		[32mConnectionManager( loopTime ,  &ELMSerial,  &ELMStatus, &ELMConnectStartTime, &ELMVersionStat , &ELMVersion, &ECUStatus , &ECUConnectTries, &ProtocolStat , &Protocol , &PIDSupportRequestStatus , &currentPIDSupportRequest, SupportPIDs);[m
[32m+[m[41m		[m
[32m+[m[41m		[m
[32m+[m		[32m// PID Vector Management[m
[32m+[m		[32mif(PIDSupportRequestStatus == known) {[m
[32m+[m			[32mPIDVectorManager(&PIDVectorCurrentState, PIDs, CurrentPID, &numPIDs, &ELMSerial, &currentMode, &secondLastPIDVectorUpdateTime, &lastPIDVectorUpdateTime, &loopTime);[m
[32m+[m		[32m}[m
[32m+[m[41m		[m
 		[m
[31m-		PIDVectorManager(&PIDVectorCurrentState, PIDs, CurrentPID, &numPIDs, &ELMSerial, &currentMode, &secondLastPIDVectorUpdateTime, &lastPIDVectorUpdateTime, &loopTime);[m
 		if (PIDVectorCurrentState == complete) PIDVectorCurrentState = active;	// Loop PID vector upon update completion[m
 		[m
 		/******************************************************************************************[m
[36m@@ -451,7 +326,7 @@[m [mint main() {[m
 				(it)->update(&loopTouch);[m
 			}[m
 			[m
[31m-			DisplayObjectManager(DASHBOARD_HotButtons, DASHBOARD_Gauges, PIDs, DASHBOARD_Menus);								// Run DisplayObjectManager (current page dashboard hotbuttons, display objects, and PIDs)		[m
[32m+[m			[32mDisplayObjectManager(DASHBOARD_HotButtons, DASHBOARD_Gauges, PIDs, SupportPIDs, &PIDSupportRequestStatus, DASHBOARD_Menus);								// Run DisplayObjectManager (current page dashboard hotbuttons, display objects, and PIDs)[m[41m		[m
 		} // End Mode 1[m
 [m
 		[m
[36m@@ -525,52 +400,63 @@[m [mint main() {[m
 			}[m
 		} // End Mode 3[m
 		[m
[31m-		[m
[31m-		[m
 		/******************************************************************************************[m
 		Mode 8 - DEVELOPMENT[m
 		******************************************************************************************/[m
 		[m
 		if(currentMode == developmentMode) {[m
[31m-[m
[31m-[m
[31m-		SupportedPIDMenu.update(&loopTouch);[m
 		[m
[31m-		[m
[31m-		} // End Mode 8[m
[32m+[m		[32m// Connection, protocol, and PID support statusing display[m
[32m+[m		[32mif(ELMStatus == connecting) {[m
[32m+[m			[32mELMConnectionStatusButton.setText("ELM Connecting");[m
[32m+[m		[32m}[m
[32m+[m		[32mif(ELMStatus == connected) {[m
[32m+[m			[32mELMConnectionStatusButton.setText("ELM Connected");[m
[32m+[m		[32m}[m
[32m+[m		[32mif(ELMVersionStat == known) {[m
[32m+[m			[32mELMConnectionStatusButton.setText(ELMVersion);[m
[32m+[m		[32m}[m
[32m+[m		[32mif(ECUStatus == connecting) {[m
[32m+[m			[32mstring txt = "ECU Connecting - ";[m
[32m+[m			[32mtxt.append(std::to_string(ECUConnectTries));[m
[32m+[m			[32mECUConnectionStatusButton.setText(txt);[m
[32m+[m		[32m}[m
[32m+[m		[32mif(ECUStatus == connected) {[m
[32m+[m			[32mstring txt = "ECU Connected";[m
[32m+[m		[32m}[m
[32m+[m		[32mif(ProtocolStat == known) {[m
[32m+[m			[32mECUConnectionStatusButton.setText(Protocol);[m
[32m+[m		[32m}[m
 [m
[32m+[m[41m		[m
[32m+[m		[32m// PID Update rate button[m
[32m+[m		[32mfloat PIDUpdateRate;[m
 [m
[32m+[m		[32mif(lastPIDVectorUpdateTime != secondLastPIDVectorUpdateTime)[m
[32m+[m			[32mPIDUpdateRate = 1000000/(lastPIDVectorUpdateTime - secondLastPIDVectorUpdateTime);[m
[32m+[m		[32melse PIDUpdateRate = 0;[m
 [m
[32m+[m		[32mPIDUpdateRateButton.setValue(PIDUpdateRate);[m
[32m+[m		[32mPIDUpdateRateButton.update();[m
 [m
[32m+[m		[32m// Connection status button[m
[32m+[m		[32mELMConnectionStatusButton.update();[m
[32m+[m		[32mECUConnectionStatusButton.update();[m
[32m+[m[41m		[m
[32m+[m		[32m//NumSuportedPIDsButton[m
[32m+[m		[32mNumSuportedPIDsButton.update();[m
[32m+[m[41m		[m
[32m+[m		[32m} // End Mode 8[m
 [m
 		End();				// Write picture to screen[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
 		[m
[31m-[m
 	}  // E N D    M A I N    W H I L E[m
[31m-}  // E N D    M A I N    L O O P[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[32m+[m[32m}  // E N D    M A I N   M E T H O D[m
 [m
 /**********************************************************************************************************************************************************[m
 																								COMPONENT FUNCTIONS {TO BECOME SEPERATE CPP FILES}[m
 **********************************************************************************************************************************************************/[m
 [m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
 // setupGraphics()[m
 void setupGraphics(int* widthPtr, int* heightPtr) {	[m
 	init(widthPtr,heightPtr);[m
[1mdiff --git a/modeManager.cpp b/modeManager.cpp[m
[1mindex 2101982..23e6945 100644[m
[1m--- a/modeManager.cpp[m
[1m+++ b/modeManager.cpp[m
[36m@@ -5,8 +5,8 @@[m
 void modeManager (Menu* ModeMenuPtr, touch_t* menuTouch, ApplicationMode* previousMode, ApplicationMode* currentMode) {[m
 	// Default mode upon initialization[m
 	if(*currentMode == noMode) {[m
[31m-		*currentMode = dashboardMode;[m
[31m-		ModeMenuPtr->selectButton("dashboard");[m
[32m+[m		[32m*currentMode = developmentMode;[m[41m[m
[32m+[m		[32mModeMenuPtr->selectButton("development");[m[41m[m
 	}[m
 	ModeMenuPtr->update(menuTouch);[m
 	string btnPressedString = ModeMenuPtr->getPressedButtonName();[m
