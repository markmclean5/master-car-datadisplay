
		//////////////////////////////////////
		// Mode 4 - Communication test mode
		//////////////////////////////////////
		if(ModeMenu.isButtonSelected("m4")) {
			
			

			
			string VIN 			= "";
			ParmStatus VINStat = unknown;
			string ELMVersion = "";
			ParmStatus ELMVersionStat = unknown;
			string Protocol = "";
			ParmStatus ProtocolStat = unknown;
			
			// ELM327
			ConnectionStatus ELMStatus = disconnected;
			uint64_t ELMConnectStartTime = 0;
			int ELMConnectTimeout = 1000; 					// Timeout, milliseconds
			string ELMResponseString = "";

			//ECU
			ConnectionStatus ECUStatus = disconnected;
			int ECUConnectTries = 0;
			string ECUResponseString = "";

			// Display items / setup
			TextView ConnectionStatusView (width/2, height/2-50, width/3-20, 360, "ConnectView");
			TextView ConnectStats(width-width/6, height/2 - 50, width/3-20, 360, "ConnectView");
			Button ConnectButton(width/6, 100, width/3 - 20, 70, "ConnectButton");
			ConnectButton.touchEnable();
			ConnectionStatusView.addNewLineIdentifier("ELMStatus", "ELM Status: ");
			ConnectionStatusView.setLineIdentifierText("ELMStatus", "Disconnected");
			ConnectionStatusView.addNewLineIdentifier("ELMVersion", "ELM Version: ");
			ConnectionStatusView.setLineIdentifierText("ELMVersion", "--------");
			ConnectionStatusView.addNewLineIdentifier("ECUStatus", "ECU Status: ");
			ConnectionStatusView.setLineIdentifierText("ECUStatus", "Disconnected");
			ConnectionStatusView.addNewLineIdentifier("ECUTries", "ECU Tries: ");
			ConnectionStatusView.setLineIdentifierText("ECUTries", "----");
			ConnectionStatusView.addNewLineIdentifier("Protocol", "Protocol: ");
			ConnectionStatusView.setLineIdentifierText("Protocol", "--------");
			ConnectionStatusView.addNewLineIdentifier("VIN", "VIN: ");
			ConnectionStatusView.setLineIdentifierText("VIN", "--------");			
			

			while(1) {
				// Loop guts
				loopTime = bcm2835_st_read();
				loopTouch = threadTouch;
				vgSetPixels(0, 0, BackgroundImage, 0, 0, 800, 480);
				ModeMenu.update(&loopTouch);

				// Page Graphics
				Fill(255,255,255,1);
				TextMid(width/2, height - 100, "Connection", SansTypeface, 20);
				TextMid(width-width/6, height - 100, "Vehicle Information", SansTypeface, 20);

				// Connect to the ELM327
				if(ConnectButton.isPressed() && ELMStatus == disconnected) {										
					ELMStatus = connecting;
					ConnectionStatusView.setLineIdentifierText("ELMStatus", "Connecting");
					ELMSerial.serialWrite("ATZ");
					ELMConnectStartTime = loopTime;
				}

				// Connecting to the ELM327
				if(ELMStatus == connecting && (loopTime < (ELMConnectStartTime + ELMConnectTimeout*1000))) {		
					ELMResponseString = ELMSerial.serialReadUntil();
					if(!ELMResponseString.empty()) {
						ELMStatus = connected;
						ConnectionStatusView.setLineIdentifierText("ELMStatus", "Connected");
						
						string resp = "";
						ELMSerial.serialWrite("ATE0"); // set elm327 output for NO ECHO
						while(resp.empty()) {
							resp = ELMSerial.serialReadUntil();
						}

						resp = "";
						ELMSerial.serialWrite("ATSP0");
						
						while(resp.empty()) {
							resp = ELMSerial.serialReadUntil();
						}
					}
				}

				// ELM327 connection timeout
				if(ELMStatus == connecting && (loopTime >= (ELMConnectStartTime + ELMConnectTimeout*1000))) {		
					ELMStatus = disconnected;
					ConnectionStatusView.setLineIdentifierText("ELMStatus", "Timeout");
				}


				// Reqest ELM327 Version information
				if(ELMStatus == connected && ELMVersionStat == unknown) {			
					ELMSerial.serialWrite("ATI");
					ELMVersionStat = requested;
				}

				// Requesting ELM327 Version information
				if(ELMVersionStat == requested) {
					ELMVersion = ELMSerial.serialReadUntil();
					if(!ELMVersion.empty()){
						ELMVersionStat = known; 
						ConnectionStatusView.setLineIdentifierText("ELMVersion", ELMVersion );
					}

				}


				// Connect to the ECU after recieving ELM Version information
				if(ELMVersionStat == known && ECUStatus == disconnected) {
					ECUStatus = connecting;
					ConnectionStatusView.setLineIdentifierText("ECUStatus", "Connecting");
					ELMSerial.serialWrite("0101");

				}

				// Connecting to the ECU
				if(ECUStatus == connecting ) {
					ECUResponseString = ELMSerial.serialReadUntil();
					if(!ECUResponseString.empty()) {
						cout << ECUResponseString << endl;
						ECUConnectTries++;
						ConnectionStatusView.setLineIdentifierText("ECUTries", to_string(ECUConnectTries));
						if(ECUResponseString.find("41 01") != string::npos) {
							ECUStatus = connected;
							ConnectionStatusView.setLineIdentifierText("ECUStatus", "Connected");
						}
						else {
							ECUStatus = disconnected;
							ECUResponseString = "";
						}
					}

				}

				// Request current connection protocol information after connecting to the ECU
				if(ECUStatus == connected && ProtocolStat == unknown){
					ELMSerial.serialWrite("ATDP");
					ProtocolStat = requested;
				}

				// Requesting protocol information
				if(ProtocolStat == requested) {
					Protocol = ELMSerial.serialReadUntil();
					if(!Protocol.empty()){
						ProtocolStat = known; 
						ConnectionStatusView.setLineIdentifierText("Protocol", Protocol );
					}

				}



				if(ProtocolStat == known && VINStat == unknown){
					// Request VIN: OBDII PID 0902 (mode 09; cmd 02)
					ELMSerial.serialWrite("0902");
					VINStat = requested;
				}



				
				if(VINStat == requested ){

					// Get raw VIN data: this is a string of hexidecimal characters
					VIN = ELMSerial.serialReadUntil(); // reads until prompt char received
					//VIN="090249 02 01 32 4D 45 46 49 02 02 4D 37 34 57 ";
					// this is a comment
					string decodedVIN = "";



					size_t found = 0;
					while(found!=string::npos){
						found = VIN.find("49 02", found); // returns pos of first occurence
						if(found != string::npos) {
							decodedVIN.append(VIN.substr(found+9, 12));
							found +=12;
						}
							
					}

					

					std::string::iterator end_pos = std::remove(decodedVIN.begin(), decodedVIN.end(), ' ');
					decodedVIN.erase(end_pos, decodedVIN.end());


					string finalVIN = "";
					for(int i=0;i<decodedVIN.length();i+=2){
						finalVIN += ( (char)strtoul(decodedVIN.substr(i, 2).c_str(), NULL, 16) );
						//cout << "stroutl " << (char)strtoul(decodedVIN.substr(i, 2).c_str(), NULL, 16) << endl;
					}
					
					if( !VIN.empty() ){
						ConnectionStatusView.setLineIdentifierText("VIN", finalVIN);
						VINStat = known;
					}

				}

				ConnectButton.updateTouch(&loopTouch);
				ConnectButton.update();

				ConnectionStatusView.update();
				ConnectStats.update();

				if(ModeMenu.isButtonPressed("m1")) {
					ModeMenu.selectButton("m1");
					break;
				}
				if(ModeMenu.isButtonPressed("m2")) {
					ModeMenu.selectButton("m2");
					break;
				}
				if(ModeMenu.isButtonPressed("m3")) {
					ModeMenu.selectButton("m3");
					break;
				}
				if(ModeMenu.isButtonPressed("m5")) {
					ModeMenu.selectButton("m5");
					break;
				}
				
				if(ModeMenu.isButtonPressed("m6")) {
					ModeMenu.selectButton("m6");
					break;
				}
				
				
				
				End();
			}

		}